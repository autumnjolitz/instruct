{% macro getter_func_template(field_name, get_variable_template) %}
def make_getter(type_def):
    '''
    Factory function that allows the metaclass to pass
    data into this context (like type definitions).
    '''
    def {{field_name}}(self) -> type_def:
        '''
        Autogenerated code: Setter function for {{field_name}}.
        '''
        {{get_variable_template|format(key=field_name)|indent(8)}}
    return {{field_name}}
{% endmacro %}

{% macro setter_func_template(field_name, setter_variable_template) %}
def make_setter(type_def, fast, derived=None):
    type_restriction = type_def
    if hasattr(type_def, '__origin__') and type_def.__origin__ is Union:
        type_restriction = type_def._subs_tree()
        if type_restriction is Union:
            type_restriction = (object,)
        elif isinstance(type_restriction, tuple):
            # Trim off the preceding Union datatype
            type_restriction = type_restriction[1:]
    if isinstance(type_restriction, type):
        type_restriction = (type_restriction,)

    assert isinstance(type_restriction, tuple) and all(
        isinstance(cls, type) for cls in type_restriction), \
        'Not all types {!r} are cls'.format(type_restriction)
    if not fast:
        def {{field_name}}(self, val: type_def) -> NoneType:
            if not isinstance(val, type_restriction):
                if isinstance(val, dict) and derived is not None:
                    val = derived(**val)
                if not isinstance(val, type_restriction):
                    raise TypeError('{!r} must be a {}'.format(val, type_restriction))
            {{setter_variable_template|format(key=field_name)|indent(12)}}
    else:
        def {{field_name}}(self, val: type_def) -> NoneType:
            {{setter_variable_template|format(key=field_name)|indent(12)}}
    return {{field_name}}
{% endmacro %}

{% macro history_setter_variable_template(field_name, setter_variable_template) %}
if not self._flags:
    {{setter_variable_template|indent(4)}}
    return
old_value = self.{{field_name}}
{{setter_variable_template}}
self._record_change('{{field_name}}', old_value, val)
{% endmacro %}

{% macro make_eq_function(fields) %}
def __eq__(self, other):
    '''
    Autogenerated code: This represents a giant if-else chain to fast field comparison.
    '''
    try:
        val = (
            {%- for field in fields %}
            self.{{field}} == other.{{field}},
            {%- endfor %}
        )
        return all(val)
    except AttributeError:
        return False
{% endmacro %}

{% macro make_clear_function(fields, setter_variable_template)%}
def clear(self, fields=None):
    '''
    Autogenerated code: This attempts to set all the slot fields to None
    '''
    if not fields:
        if fields is None:
            fields = self._columns
        else:
            fields = ()
    val = None
    {%- for field in fields %}
    if '{{field}}' in fields:
        {{setter_variable_template|format(key=field)|indent(8)}}
    {%- endfor %}
    super(self.__class__, self).clear(fields)
{% endmacro %}
