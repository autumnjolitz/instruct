import sys
import os
import subprocess
import shlex
from typing import Any
from contextlib import suppress, closing

try:
    from packaging.version import parse as parse_version
except ImportError:
    from setuptools._vendor.packaging.version import parse as parse_version

here = os.path.dirname(os.path.abspath(__file__))

VERSION_FILE = os.path.join(here, "instruct/about.py")

with open(os.path.join(here, "CURRENT_VERSION.txt")) as fh:
    for line in fh:
        if line.strip().startswith("#"):
            continue
        version = line.strip()
        break
    else:
        fh.seek(0)
        raise LookupError(f"Cannot find a version inside file! It has {fh.read()!r}")

empty_s = ""
current_sha = ""
if os.path.exists(os.path.join(here, ".git")):
    current_sha = subprocess.check_output(shlex.split("git rev-parse HEAD")).strip().decode()

full_version = version
if current_sha:
    full_version = f"{version}+git.{current_sha}"
parsed_version = parse_version(full_version)


def quote(s: Any) -> str:
    if not isinstance(s, str):
        return repr(s).replace("'", '"')
    return f'"{s}"'


def write_about_and_emit_version(filename_or_stream: str = VERSION_FILE):
    if filename_or_stream == "-":
        stream = sys.stderr
    elif isinstance(filename_or_stream, str):
        stream = open(filename_or_stream, "w")
    elif hasattr(filename_or_stream, "write"):
        stream = filename_or_stream
    else:
        raise TypeError(filename_or_stream)
    prerelease_version = repr(parsed_version.pre).replace("'", '"')
    with closing(stream) as fh:
        fh.write(
            f"""# Autogenerated from `attr: generate_version.write_about_and_emit_version`
# it is run on setup.py/pip installs!
from typing import NamedTuple, Optional, Tuple
from functools import total_ordering


@total_ordering
class VersionInfo(NamedTuple):
    major: int
    minor: int
    micro: int

    pre: Optional[Tuple[str, int]]
    post: Optional[int]
    local: Optional[str]

    def __eq__(self, other) -> bool:
        return self[:3] == other[:3]

    def __lt__(self, other) -> bool:
        return self[:3] < other[:3]

    @property
    def release(self) -> Tuple[int, int, int]:
        return self[:3]

    @property
    def public(self) -> str:
        return "{full_version}"


__version__: str = "{full_version}"
__version_info__: VersionInfo = VersionInfo(
    {parsed_version.major!r},
    {parsed_version.minor!r},
    {parsed_version.micro!r},
    {quote(parsed_version.pre) if parsed_version.pre else None},
    {parsed_version.post!r},
    {quote(parsed_version.local) if parsed_version.local else None},
)
__commit__: Optional[str] = {quote(parsed_version.local) or None}
"""
        )
    return version


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("filename", default="-")
    args = parser.parse_args()
    write_about_and_emit_version(args.filename)
